#!/usr/bin/python3

from ctypes import *
import io
import sys
from time import localtime, strftime

NINODE = 100
BLKSIZ = 512

IALLOC	= 0x8000		# file is used

IFMT	= 0x6000		# type of file (mask)
IFDIR	= 0x4000		# directory
IFCHR	= 0x2000		# character special
IFBLK	= 0x6000		# block special, 0 is regular

ILARG	= 0x1000		# large addressing algorithm
ISUID	= 0x800			# set user id on execution
ISGID	= 0x400			# set group id on execution
ISVTX	= 0x200			# save swapped text even after use
IREAD	= 0x100
IWRITE	= 0x80
IEXEC	= 0x40

class INode(LittleEndianStructure):
    _fields_ = (
        ('mode', c_uint16),	# file type and mode
        ('nlink', c_uint8),	# link count
        ('uid', c_int8),	# user id
        ('gid', c_int8),	# group id
        ('size0', c_uint8),	# file size
        ('size1', c_uint16),	# file size
        ('addr', c_int16 * 8),	# device address
        ('atime', c_uint32),	# last access time
        ('mtime', c_uint32),	# last modified time
    )

class SuperBlock(LittleEndianStructure):
    _fields_ = (
        ('isize', c_int16),     # size in blocks of I list
        ('fsize', c_int16),     # size in blocks of entire volume
        ('nfree', c_int16),     # number of in core free blocks (0-100)
        ('free', c_int16 * 100), # in core free blocks
        ('ninode', c_int16),    # number of in core I nodes (0-100)
        ('inode', c_int16 * 100), # in core free I nodes
        ('flock', c_int8),      # lock during free list manipulation
        ('ilock', c_int8),      # lock during I list manipulation
        ('fmod', c_int8),       # super block modified flag
        ('ronly', c_int8),      # mounted read-only flag
        ('time', c_int32),      # current date of last updatexs
        ('pad', c_int16 * 48),
    )

def hexdump(block):
    #print(type(block))
    offset = 0
    for b in block:
        offset += 1
        sep = '\n' if offset % 16 == 0 else ' '
        print('{0:02x}{1}'.format(b & 0xff, sep), end='')

def pdpendian(i32):
    return i32 >> 16 & 0xffff | (i32 & 0xffff) << 16

def unixtime(serial):
    return strftime('%Y-%m-%d %H:%M:%S', localtime(serial))

def filesize(s0, s1):
    return s0 << 16 | s1 & 0xffff

def permission(perm, setid, sticky = False):
    read = 'r' if perm & IREAD else '-'
    write = 'w' if perm & IWRITE else '-'
    exec = 'x' if perm & IEXEC else '-'
    if setid:
        exec = 's' if perm & IEXEC else 'S'
    if sticky:
        exec = 't' if perm & IEXEC else 'T'
    return read + write + exec

def filemode(mode):
    type = mode & IFMT
    type = '-' if type == 0 else 'd' if type == IFDIR else 'c' if type == IFCHR else 'b'
    owner = permission(mode, mode & ISUID == ISUID)
    group = permission(mode << 3, mode & ISGID == ISGID)
    others = permission(mode << 6, mode & ISVTX)
    alloc = '*' if mode & IALLOC == IALLOC else '.'
    return type + owner + group + others + alloc

def inode(block):
    info = INode()
    io.BytesIO(block).readinto(info)
    info.atime = pdpendian(info.atime)
    info.mtime = pdpendian(info.mtime)
    return info

def report_inode(i):
    print('''file type and mode: {11:s} ({0:d}/{0:04x})
link count: {1:d} ({1:02x})
user id: {2:d} ({2:02x})
group id: {3:d} ({3:02x})
file size0: {4:d} ({4:02x})
file size1: {5:d} ({5:04x})
file size: {10:d} ({10:08x})
last access time: {7:s} ({6:d}/{6:08x})
last modified time: {9:s} ({8:d}/{8:08x})'''.format(i.mode, i.nlink, i.uid, i.gid, i.size0, i.size1, i.atime, unixtime(i.atime), i.mtime, unixtime(i.mtime), filesize(i.size0, i.size1), filemode(i.mode)))

def superblock(block):
    info = SuperBlock()
    io.BytesIO(block).readinto(info)
    # PDP endian
    info.time = pdpendian(info.time)
    return info

def report_superblock(i):
    print('''size in blocks of I list: {0:d} ({0:04x})
size in blocks of entire volume: {1:d} ({1:04x})
number of in core free blocks (0-100): {2:d} ({2:04x})
number of in core I nodes (0-100): {3:d} ({3:04x})
lock during free list manipulation: {4:d} ({4:02x})
lock during I list manipulation: {5:d} ({5:02x})
super block modified flag: {6:d} ({6:02x})
mounted read-only flag: {7:d} ({7:02x})
current date of last update: {9:s} ({8:d}/{8:08x})'''.format(i.isize, i.fsize, i.nfree, i.ninode, i.flock, i.ilock, i.fmod, i.ronly, i.time, unixtime(i.time)))

def report(f):
    if f.seekable():
        f.seek(BLKSIZ)
    else:
        f.read(BLKSIZ)
    block = f.read(BLKSIZ)
    
    #hexdump(block)
    sb = superblock(block)
    #report_superblock(sb)
    for i in range(sb.isize * BLKSIZ // sizeof(INode)):
        block = f.read(sizeof(INode))
        node = inode(block)
        if (node.nlink > 0):
            report_inode(node)

def main():
    if len(sys.argv) <= 1:
        report(sys.stdin.buffer)
    else:
        for arg in sys.argv[1:]:
            with open(arg, 'rb') as file:
                report(file)

if __name__ == '__main__':
   main()

# "ino.h"
# /*
#  * Inode structure as it appears on
#  * the disk. Not used by the system,
#  * but by things like check, df, dump.
#  */
# struct	inode
# {
# 	int	i_mode;
# 	char	i_nlink;
# 	char	i_uid;
# 	char	i_gid;
# 	char	i_size0;
# 	char	*i_size1;
# 	int	i_addr[8];
# 	int	i_atime[2];
# 	int	i_mtime[2];
# };
# 
# /* modes */
# #define	IALLOC	0100000
# #define	IFMT	060000
# #define		IFDIR	040000
# #define		IFCHR	020000
# #define		IFBLK	060000
# #define	ILARG	010000
# #define	ISUID	04000
# #define	ISGID	02000
# #define ISVTX	01000
# #define	IREAD	0400
# #define	IWRITE	0200
# #define	IEXEC	0100

# "filsys.h"
# /*
#  * Definition of the unix super block.
#  * The root super block is allocated and
#  * read in iinit/alloc.c. Subsequently
#  * a super block is allocated and read
#  * with each mount (smount/sys3.c) and
#  * released with unmount (sumount/sys3.c).
#  * A disk block is ripped off for storage.
#  * See alloc.c for general alloc/free
#  * routines for free list and I list.
#  */
# struct	filsys
# {
# 	int	s_isize;	/* size in blocks of I list */
# 	int	s_fsize;	/* size in blocks of entire volume */
# 	int	s_nfree;	/* number of in core free blocks (0-100) */
# 	int	s_free[100];	/* in core free blocks */
# 	int	s_ninode;	/* number of in core I nodes (0-100) */
# 	int	s_inode[100];	/* in core free I nodes */
# 	char	s_flock;	/* lock during free list manipulation */
# 	char	s_ilock;	/* lock during I list manipulation */
# 	char	s_fmod;		/* super block modified flag */
# 	char	s_ronly;	/* mounted read-only flag */
# 	int	s_time[2];	/* current date of last update */
# 	int	pad[50];
# };
